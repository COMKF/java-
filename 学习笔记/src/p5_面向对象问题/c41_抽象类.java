package p5_面向对象问题;
//抽象类：关键字 abstract  模糊，笼统，不具体
/*
 * 特点：1.方法只有生声明，没有实现，该方法就是抽象方法，需要被abstract修饰，抽象方法必须定义在抽象类中，该类也必须被abstract修饰
 * 2.抽象类不能被实例化，因为调用抽象方法没有意义
 * 3.抽象类必须被其子类覆盖所有抽象方法后，该子类才可以实例化，否则，这个子类还是抽象类
 */
/*
 * 1.抽象类有构造函数，用于给子类对象进行初始化
 * 2.抽象类可以不定义抽象方法。但是很少见，目的是不让该类创建对象，AWT的适配器就是这样。通常这个类中的方法有方法体，但是没有内容
 * 3.抽象关键字abstract不能与private,static,final不能共存
 * 4.抽象类和一般类，都是用来描述事物的，都定义了成员。
 * 		不同的是：
 * 		一般类有足够的信息描述事物。抽象类描述事物的信息可能不足
 *		一般类中不能定义抽象方法，只能定义非抽象方法。抽象类中可以定义抽象方法，同时也可以定义非抽象方法
 *		一般类可以被实例化。抽象类不能被实例化
 * 5.抽象类一定是一个是父类，否则不能使用。因为需要子类覆盖其抽象方法后才可以对子类实例化。
 */
abstract class 犬科{
	abstract void 吼叫();//这个方法也是对狼和狗向上抽取得到的，但是因为狼和狗的方法内容不同，所以取其共性，忽略不同，得到了抽象方法
						//抽象方法没有方法体。有没有方法体取决于有没有{}
}

class 狗 extends 犬科{
	void 吼叫(){
		System.out.println("汪汪");
	}
}

class 狼 extends 犬科{
	void 吼叫(){
		System.out.println("嗷嗷");
	}
}
public class c41_抽象类 {

	public static void main(String[] args) {

	}

}
